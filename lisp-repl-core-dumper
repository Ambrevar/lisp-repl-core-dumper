#!/bin/sh
#| -*- mode: lisp; -*-
## Copyright (C) 2020 Pierre Neidhardt <mail@ambrevar.xyz>
##
## This program is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this program.  If not, see <http://www.gnu.org/licenses/>.

XDG_CACHE_HOME=${XDG_CACHE_HOME:-$HOME/.cache/}
LISP_REPL_CORE_PATH=${LISP_REPL_CORE_PATH:-$XDG_CACHE_HOME/lisp-repl-core-directory/}

usage () {
	cat<<EOF>&2
Usage: ${0##*/} LISP [SYSTEMS]

Create a Lisp image with ASDF and SYSTEMS preloaded, then run LISP using this
image.

The image is only created for one of the following reasons:

- If it does not exist.
- If its version or hash does not match LISP version.
- If its preloaded systems do not match SYSTEMS.

The image is stored in \$LISP_REPL_CORE_PATH ($LISP_REPL_CORE_PATH).
EOF
}

[ $# -eq 0 ] && usage && exit 1

scriptpath=$0
lisp=$1
lisp_basename=$(basename "$lisp")
shift 1
packages=$(echo "$@" | sed 's/ /\n/g' | sort | paste -sd '+' -)
[ -n "$packages" ] && packages=-"$packages"
lisp_hash=$(sha1sum $(which "$lisp") | cut -f1 -d' ')

case "$lisp_basename" in
sbcl)
	lisp_flags="--noinform --no-userinit"
	eval_flag=--eval
	image_flag=--core
	;;
ccl)
	lisp_flags=--no-init
	eval_flag=--eval
	image_flag=--image-name
	;;
clisp)
	lisp_flags="-norc --quiet"
	eval_flag=-x
	image_flag=-M
	;;
	*)
		echo >&2 "Unsupported '$lisp' implementation."
		exit 2;;
esac

## TODO: Include tests here?


## Wrap result with (progn ... (values)) because CLISP outputs `-x` evalutions
## to stdout.
version=$("$lisp" $lisp_flags $eval_flag '(progn (princ (lisp-implementation-version)) (values))' $eval_flag '(quit)')
core="$LISP_REPL_CORE_PATH"/$lisp_basename-$version-$lisp_hash$packages.image

if [ ! -f "$core" ]; then
	case "$lisp_basename" in
	sbcl)
		$lisp $lisp_flags --script "$scriptpath" "$core" "$@"
		;;
	ccl)
		## It seems that CCL cannot load files with shabangs and
		##   (progn (read-line s) (load s))
		## does not seem to work.
		$lisp $lisp_flags $eval_flag \
					"$(cat<<EOF
(with-open-file (s "$scriptpath")
  (read-line s)
  (let ((file-string (format nil "~{~a~^~%~}"
                             (loop for line = (read-line s nil :eof)
                                   until (eq line :eof)
                                   collect line))))
    (with-input-from-string (s file-string)
      (loop for object = (read s nil :eof)
            until (eq object :eof)
            do (eval object)))))
EOF
						)" -- "$core" "$@"
		;;
	clisp)
		$lisp $lisp_flags "$scriptpath" -- "$core" "$@"
		;;
	esac
fi

if [ -f "$core" ]; then
	exec $lisp $image_flag $core
else
	echo >&2 "Error generating image."
	exit 1
fi

|#
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defpackage lisp-repl-core-dumper
  (:use #:common-lisp))
(in-package lisp-repl-core-dumper)

(require "asdf")

(defvar default-packages
  (append
   #+sbcl
   '(sb-bsd-sockets sb-posix sb-introspect sb-cltl2 )
   '(asdf)))

(defvar core (first (uiop:command-line-arguments)))

(defvar extra-packages (rest (uiop:command-line-arguments)))

(defun ensure-parent-exists (file)
  (uiop:ensure-all-directories-exist
   (list (directory-namestring file))))

(mapc #'require default-packages)
(mapc #'asdf:load-system extra-packages)

(format *error-output* "Dumping ~s version ~s~a.~%"
        core
        (lisp-implementation-version)
        (if extra-packages
            (format nil " with packages ~a" extra-packages)
            ""))
(finish-output *error-output*)
(format t "~a~%" core)
(finish-output)

;; `*image-dump-hook*' is `(UIOP/CONFIGURATION:CLEAR-CONFIGURATION)' by
;; default, which slows down startup.
;; TODO: Make this customizable?
(setf uiop:*image-dump-hook* nil)
(ensure-parent-exists core)

(in-package cl-user)
(let ((core lisp-repl-core-dumper::core))
  (delete-package :lisp-repl-core-dumper)
  #-clisp
  (uiop:dump-image core)
  #+clisp
  (progn
    ;; CLISP image saving is too verbose.
    (funcall (read-from-string "uiop:call-with-null-output")
             (lambda (null-output)
               (let ((*standard-output* null-output))
                 (ext:saveinitmem core
                                  :quiet t
                                  :start-package *package*
                                  :keep-global-handlers nil
                                  :executable nil))))
    ;; CLISP does not quit after dumping an image.
    (ext:quit 0)))
