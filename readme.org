Do you fancy an instantly starting Common Lisp REPL?
Even one that automatically includes your favourite libraries?

This tool is for you!

- It's portable and should work with any compiler.
  If your compiler is not supported, please report.  (Or better, send a patch!)

- It works for any REPL.

- It allows you to include arbitrary libraries.

Simply load the script with a supported Lisp and it will dump an image that
preloads ASDF and the user-provided extra libraries.  You can then configure
your REPL to use this image for an instant startup!

* Installation

It's a stand-alone, portable script: just download and run it!

You may want to install it in your =PATH= for convenience.

It's also available as a Guix package.

* Usage

See =lisp-repl-core-dumper -h=.

Example use:

#+begin_src sh
lisp-repl-core-dumper sbcl alexandria serapeum
#+end_src

will generate an image (if necessary), including Alexandria and Serapeum, then
drop you in the resulting REPL.

* Tested compilers

- Steel Bank Common Lisp (SBCL)
- Clozure Common Lisp (CCL)
- CLISP

Some implementations such as Embedded Common Lisp (ECL) does not seem to support
image dumping.

* Emacs setup

While this can be used with any editor, here is a configuration snippet for
Emacs user to save them some typing.

This configuration sample makes use of the ability to accept lambdas as Lisp
implementation.  This way we call the dumper on each inferior Lisp startup.

#+begin_src elisp
  (let ((dumper "/path/to/lisp-repl-core-dumper"))
    (setq sly-lisp-implementations
          `((ccl (,dumper "ccl"))
            (ccl-with-alex (,dumper "ccl" "alexandria"))
            (clisp (,dumper "clisp"))
            (sbcl (,dumper "sbcl")))))
#+end_src

or, if =lisp-repl-core-dumper= is in your path:

#+begin_src elisp
  (setq sly-lisp-implementations
        `((ccl ("lisp-repl-core-dumper" "ccl"))
          (ccl-with-alex ("lisp-repl-core-dumper" "ccl" "alexandria"))
          (clisp ("lisp-repl-core-dumper" "clisp"))
          (sbcl ("lisp-repl-core-dumper" "sbcl"))))
#+end_src

* Implementation notes

** Why isn't this an ASDF system?

=(require "asdf")= takes too much time.

The time spent checking for an up-to-date image adds further delay before
the REPL is usable, so we want to make it the fastest possible.

We could have programmed it fully in Lisp, but then we would have need a
portable way to interact with files, run a program, etc.  Which would amount to
loading UIOP or reimplementing it, which would be too slow.

The POSIX shell code depends on standard Unix tools and does the image checking
job in just a few lines.

** How do we deal with core compatibility?

Some implementations like SBCL refuse to load a core that wasn't created with
the exact same compiler.  Since it's possible to have different compilers with
the same version (e.g. when compiling them with different flags), checking
against the version is not enough.

One approach would be to compare the hash of the executable, but

1. the core is not necessarily in the executable file;
2. it's too slow.

Our technique for now is to try once to rebuild the core on load failure.

* References

hu.dwim has a a similar, more sophisticated, but less general script:
https://hub.darcs.net/hu.dwim/hu.dwim.environment/browse/bin/build-development-image.sh
